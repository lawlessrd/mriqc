version: 2.1
orbs:
  docker: circleci/docker@1.6.0

jobs:
  build:
    environment:
      - TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      - MRIQC_API_TAG: 1.0.6
      - MRIQC_API_DOCKER_IMAGES: "nginx swaggerapi/swagger-ui:latest mongo python:3.6-onbuild"
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/src/mriqc
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/mriqc
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
            - build-v1--{{ .Revision }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
            - /tmp/images
            - /tmp/docker-compose
      - docker/install-docker-credential-helper
      - run:
          name: Docker authentication
          command: |
            if [[ -n $DOCKER_PAT ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set up Docker registry
          command: |
            if [[ -f /tmp/images/registry.tar.gz ]]; then
              echo "Loading saved registry image"
              docker load < /tmp/images/registry.tar.gz
            else
              echo "Pulling registry image from DockerHub"
              docker pull registry:2
              mkdir -p /tmp/images
              docker save registry:2 | gzip > /tmp/images/registry.tar.gz
            fi
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images
          command: |
            set +e
            docker pull localhost:5000/ubuntu
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulling from local registry"
                docker tag localhost:5000/ubuntu ubuntu:focal-20210416
                docker pull localhost:5000/mriqc
                docker tag localhost:5000/mriqc nipreps/mriqc:latest
                docker tag localhost:5000/mriqc nipreps/mriqc
            else
                echo "Pulling from Docker Hub"
                docker pull ubuntu:focal-20210416
                docker tag ubuntu:focal-20210416 localhost:5000/ubuntu
                docker push localhost:5000/ubuntu
                docker pull nipreps/mriqc:latest
            fi

      - run:
          name: MRIQCWebAPI - Pull Docker images
          command: |
            webapi_images=($MRIQC_API_DOCKER_IMAGES)
            for image in ${webapi_images[@]}; do
                set +e
                docker pull localhost:5000/${image}
                success=$?
                set -e
                if [[ "$success" = "0" ]]; then
                    docker tag localhost:5000/${image} ${image}
                else
                    docker pull ${image}
                    docker tag ${image} localhost:5000/${image}
                    docker push localhost:5000/${image}
                fi
            done;

      - run:
          name: Prepare MRIQCWebAPI
          command: |

            if [[ ! -f /tmp/docker-compose/docker-compose ]]; then
              mkdir -p /tmp/docker-compose/
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /tmp/docker-compose/docker-compose
              chmod a+rx /tmp/docker-compose/docker-compose
            fi

            set +e
            docker pull localhost:5000/dockereve-master_eve:latest
            success=$?
            set -e
            if [[ "$success" = 0 ]]; then
                docker tag localhost:5000/dockereve-master_eve:latest dockereve-master_eve:latest
            fi

            rm -rf /tmp/src/mriqcwebapi
            git clone https://github.com/nipreps/mriqcwebapi.git /tmp/src/mriqcwebapi
            cd /tmp/src/mriqcwebapi
            if [ "${MRIQC_API_SECRET_TOKEN}" != "" ]; then
              sed -i -E "s/<secret_token>/$MRIQC_API_SECRET_TOKEN/" dockereve-master/.env
              grep -q -i $MRIQC_API_SECRET_TOKEN dockereve-master/.env
            fi
            /tmp/docker-compose/docker-compose -f /tmp/src/mriqcwebapi/dockereve-master/docker-compose.yml pull
            /tmp/docker-compose/docker-compose -f /tmp/src/mriqcwebapi/dockereve-master/docker-compose.yml build

            docker tag dockereve-master_eve:latest localhost:5000/dockereve-master_eve:latest
            docker push localhost:5000/dockereve-master_eve:latest
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            # Inject MRIQC-WebAPI secret
            if [ "${MRIQC_API_SECRET_TOKEN}" != "" ]; then
              sed -i -E "s/<secret_token>/$MRIQC_API_SECRET_TOKEN/" mriqc/interfaces/webapi.py
              sed -i -E "s/<secret_token>/$MRIQC_API_SECRET_TOKEN/" mriqc/data/reports/individual.html
              grep -q -i $MRIQC_API_SECRET_TOKEN mriqc/interfaces/webapi.py
            fi
            # Get version, update files.
            THISVERSION=$( python3 -c "from versioneer import get_version; print(get_version())" )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            echo "${CIRCLE_TAG:-$THISVERSION}" > mriqc/VERSION
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=nipreps/mriqc \
                -t nipreps/mriqc:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag nipreps/mriqc:latest localhost:5000/mriqc
            docker push localhost:5000/mriqc
            webapi_images=($MRIQC_API_DOCKER_IMAGES)
            for image in ${webapi_images[@]}; do
                docker tag ${image} localhost:5000/${image}
                docker push localhost:5000/${image}
            done
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
              /etc/docker/registry/config.yml
      - save_cache:
         key: build-v1-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/docker
            - /tmp/images
            - /tmp/docker-compose
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/mriqc
            - src/mriqcwebapi

  get_data:
    machine:
      image: ubuntu-2004:202104-01
    environment:
      - TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      - TEST_DATA_NAME: "circle-tests"
      - TEST_DATA_URL: "https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/5b6c9950fed49e001a7885b6"
    working_directory: /home/circleci/data
    steps:
      - checkout:
          path: /tmp/src/mriqc
      - run:
          name: Check whether build should be skipped
          command: |
            cd /tmp/src/mriqc
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - data-v2-{{ epoch }}
            - data-v2-
      - run:
          name: Get test data
          command: |
            mkdir -p /tmp/data
            if [[ ! -d /tmp/data/${TEST_DATA_NAME} ]]; then
              wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 0 -q \
                -O ${TEST_DATA_NAME}.tar.gz "${TEST_DATA_URL}"
              tar xvzf ${TEST_DATA_NAME}.tar.gz -C /tmp/data/
            else
              echo "Dataset ${TEST_DATA_NAME} was cached"
            fi
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/t1w /tmp/bold
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/t1w/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/t1w/nipype.cfg
            echo "hash_method = content" >> /tmp/t1w/nipype.cfg
            cp /tmp/t1w/nipype.cfg /tmp/bold/nipype.cfg
      - save_cache:
          key: data-v2-{{ epoch }}
          paths:
            - /tmp/data
            - /tmp/t1w
            - /tmp/bold

  test_pytest:
    machine:
      image: ubuntu-1604:202007-01
    working_directory: /home/circleci/out/tests
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Check whether build should be skipped
          command: |
            cd /tmp/src/mriqc
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[only[ _]?(anat|func|smoke)\]' )" != "" ]]; then
              echo "Only smoke-tests build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run:
          name: Docker authentication
          command: |
            if [[ -n $DOCKER_PAT ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set-up a Docker registry
          command: |
            if [[ -f /tmp/images/registry.tar.gz ]]; then
              echo "Loading saved registry image"
              docker load < /tmp/images/registry.tar.gz
            else
              echo "Pulling registry image from DockerHub"
              docker pull registry:2
            fi
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/mriqc
            docker tag localhost:5000/mriqc nipreps/mriqc:latest
      - run:
          name: Run MRIQC tests
          no_output_timeout: 2h
          command: |
            docker run -ti --rm=false \
              -v $PWD:/scratch --entrypoint="pytest" -w /src/mriqc \
              nipreps/mriqc:latest mriqc \
              --junitxml=/scratch/tests.xml \
              --doctest-modules --ignore=mriqc/bin \
              --ignore=mriqc/classifier/sklearn --ignore=mriqc/interfaces/transitional.py
      - store_test_results:
          path: /home/circleci/out/tests

  T1w:
    environment:
      - TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      - TEST_DATA_NAME: "circle-tests"
      - MRIQC_API_DOCKER_IMAGES: "nginx swaggerapi/swagger-ui:latest mongo python:3.6-onbuild dockereve-master_eve:latest"
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/t1w
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Check whether build should be skipped
          command: |
            cd /tmp/src/mriqc
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[only[ _]?func\]' )" != "" ]]; then
              echo "Only functional smoke-tests build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
            - /tmp/docker-compose
      - run:
          name: Set-up a Docker registry
          command: |
            if [[ -f /tmp/images/registry.tar.gz ]]; then
              echo "Loading saved registry image"
              docker load < /tmp/images/registry.tar.gz
            else
              echo "Pulling registry image from DockerHub"
              docker pull registry:2
            fi
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/mriqc
            docker tag localhost:5000/mriqc nipreps/mriqc:latest

            webapi_images=($MRIQC_API_DOCKER_IMAGES)
            for image in ${webapi_images[@]}; do
                docker pull localhost:5000/${image}
                docker tag localhost:5000/${image} ${image}
            done;
      - run:
          name: Start MRIQC WebAPI endpoint
          command: |
            /tmp/docker-compose/docker-compose -f /tmp/src/mriqcwebapi/dockereve-master/docker-compose.yml --verbose up -d
          background: true
      - restore_cache:
          keys:
            - data-v2-{{ epoch }}
            - data-v2-
      - restore_cache:
          keys:
            - t1w-v3-{{ epoch }}
            - t1w-v3-
      - run:
          name: Run participant-level on T1w images
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/t1w/work /tmp/t1w/derivatives
            # Run MRIQC
            docker run -u $( id -u ) --rm=false -ti \
                       -v /tmp/data/${TEST_DATA_NAME}:/data:ro \
                       -v /tmp/t1w:/scratch -w /scratch \
                       nipreps/mriqc:latest \
                       /data derivatives/ participant \
                       -vv --verbose-reports --profile -m T1w --dsname circletests \
                       --n_procs 2 --ants-nthreads 1 --ants-float \
                       --webapi-url http://$( hostname -I | awk '{print $1}' )/api/v1 --upload-strict
      - save_cache:
          key: t1w-v3-{{ epoch }}
          paths:
            - /tmp/t1w/work

      - run:
          name: Run group-level on T1w images
          no_output_timeout: 2h
          command: |
            docker run -u $( id -u ) --rm=false -ti \
                       -v /tmp/data/${TEST_DATA_NAME}:/data:ro \
                       -v /tmp/t1w:/scratch -w /scratch \
                       nipreps/mriqc:latest \
                       /data derivatives/ group \
                       -m T1w -vv

      - store_artifacts:
          path: /tmp/t1w/derivatives

      - run:
          name: Checking presence of outputs
          command: |
            mkdir -p /tmp/t1w/test
            find /tmp/t1w/derivatives | sed s+/tmp/t1w/derivatives/++ | sort > /tmp/t1w/test/outputs.out
            diff /tmp/src/mriqc/.circleci/circle_T1w.txt /tmp/t1w/test/outputs.out
            exit $?

      - run:
          name: Clean-up work directory (just leave reports & commandlines)
          command: |
            find /tmp/t1w/work -type f -not -name "report.rst" -and -not -name "command.txt" -delete

      - store_artifacts:
          path: /tmp/t1w/work

      - run:
          name: Checking changes on IQMs
          command: |
            docker run --rm=false -ti -v $PWD:/scratch -w /scratch \
              --entrypoint="dfcheck" nipreps/mriqc:latest \
              -i /scratch/derivatives/group_T1w.tsv \
              -r /src/mriqc/mriqc/data/testdata/group_T1w.tsv

      - run:
          name: WebAPI - Check records
          command: |
            docker run --rm=false -ti \
              --entrypoint="/opt/conda/bin/mriqcwebapi_test" \
              nipreps/mriqc:latest \
              T1w 4 \
              --webapi-url http://$( hostname -I | awk '{print $1}' )/api/v1/T1w

      # - run:
      #     name: Test classifier
      #     command: |
      #       docker run --rm=false -ti -v $PWD:/scratch -w /scratch \
      #                  --entrypoint=mriqc_clf nipreps/mriqc:latest \
      #                  --train --test -P /opt/conda/lib/python3.8/site-packages/mriqc/data/mclf_run-20170724-191452_mod-rfc_ver-0.9.7-rc8_class-2_cv-loso_data-all_settings.yml -v
      #       # Run the classifier on the test data
      #       docker run --rm=false -ti -v $PWD:/scratch -w /scratch \
      #                  --entrypoint=mriqc_clf nipreps/mriqc:latest \
      #                  --load-classifier $( basename `ls mclf_run-*_class-2_cv-loso_data-all_estimator.pklz` ) -X /scratch/derivatives/group_T1w.tsv -v
      - store_artifacts:
          path: /tmp/t1w/test

  bold:
    environment:
      - TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      - TEST_DATA_NAME: "circle-tests"
      - MRIQC_API_DOCKER_IMAGES: "nginx swaggerapi/swagger-ui:latest mongo python:3.6-onbuild dockereve-master_eve:latest"
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/bold
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Check whether build should be skipped
          command: |
            cd /tmp/src/mriqc
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[only[ _]?anat\]' )" != "" ]]; then
              echo "Only anatomical smoke-tests build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
            - /tmp/docker-compose
      - run:
          name: Set-up a Docker registry
          command: |
            if [[ -f /tmp/images/registry.tar.gz ]]; then
              echo "Loading saved registry image"
              docker load < /tmp/images/registry.tar.gz
            else
              echo "Pulling registry image from DockerHub"
              docker pull registry:2
            fi
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/mriqc
            docker tag localhost:5000/mriqc nipreps/mriqc:latest

            webapi_images=($MRIQC_API_DOCKER_IMAGES)
            for image in ${webapi_images[@]}; do
                docker pull localhost:5000/${image}
                docker tag localhost:5000/${image} ${image}
            done;
      - run:
          name: Start MRIQC WebAPI endpoint
          command: |
            /tmp/docker-compose/docker-compose -f /tmp/src/mriqcwebapi/dockereve-master/docker-compose.yml --verbose up -d
          background: true

      - restore_cache:
          keys:
            - data-v2-{{ epoch }}
            - data-v2-
      - restore_cache:
          keys:
            - bold-v2-{{ epoch }}
            - bold-v2-

      - run:
          name: Run participant-level on BOLD images
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/bold/work /tmp/bold/derivatives
            # Run MRIQC
            docker run -u $( id -u ) --rm=false -ti -v /tmp/data/${TEST_DATA_NAME}:/data:ro \
                       -v $PWD:/scratch -w /scratch \
                       nipreps/mriqc:latest \
                       /data derivatives/ participant \
                       -vv --verbose-reports --profile -m bold --dsname circletests \
                       --n_procs 2 --ants-nthreads 1 --ants-float \
                       --testing --ica \
                       --webapi-url http://$( hostname -I | awk '{print $1}' )/api/v1 --upload-strict
      - save_cache:
          key: bold-v2-{{ epoch }}
          paths:
            - /tmp/bold/work

      - run:
          name: Run group-level on BOLD images
          no_output_timeout: 2h
          command: |
            docker run -u $( id -u ) --rm=false -ti -v /tmp/data/${TEST_DATA_NAME}:/data:ro \
                       -v $PWD:/scratch -w /scratch \
                       nipreps/mriqc:latest \
                       /data derivatives/ group \
                       -m bold -vv

      - store_artifacts:
          path: /tmp/bold/derivatives

      - run:
          name: Checking presence of outputs
          command: |
            mkdir -p /tmp/bold/test
            find /tmp/bold/derivatives | sed s+/tmp/bold/derivatives/++ | sort > /tmp/bold/test/outputs.out
            diff /tmp/src/mriqc/.circleci/circle_bold.txt /tmp/bold/test/outputs.out
            exit $?

      - run:
          name: Clean-up work directory (just leave reports & commandlines)
          command: |
            find /tmp/bold/work -type f -not -name "report.rst" -and -not -name "command.txt" -delete

      - store_artifacts:
          path: /tmp/bold/work

      - run:
          name: Checking changes on IQMs
          command: |
            docker run -u $( id -u ) --rm=false -ti -v $PWD:/scratch -w /scratch \
              --entrypoint="dfcheck" nipreps/mriqc:latest \
              -i /scratch/derivatives/group_bold.tsv \
              -r /src/mriqc/mriqc/data/testdata/group_bold.tsv

      - run:
          name: WebAPI - Check records
          command: |
            docker run --rm=false -ti \
              --entrypoint="/opt/conda/bin/mriqcwebapi_test" \
              nipreps/mriqc:latest \
              bold 9 \
              --webapi-url http://$( hostname -I | awk '{print $1}' )/api/v1/bold

      - store_artifacts:
          path: /tmp/bold/test

  build_docs:
    docker:
      - image: circleci/python:3.8.5
    environment:
      - FSLOUTPUTTYPE: NIFTI
    steps:
      - checkout
      - run:
          name: Install Graphviz
          command: sudo apt update && sudo apt -y install graphviz
      - run:
          name: Install deps
          command: pip install --no-cache-dir -r docs/requirements.txt
      - run:
          name: Build MRIQC documentation
          no_output_timeout: 2h
          command: |
            make -C docs html
            # make -C docs SPHINXOPTS="-W" html | tee $PWD/builddocs.log
            # cat $PWD/builddocs.log
            # grep -qv "ERROR" $PWD/builddocs.log
      - store_artifacts:
          path: ./docs/_build/html

  update_changes:
    machine:
      image: ubuntu-1604:202007-01
    working_directory: /tmp/src/mriqc
    steps:
      - attach_workspace:
          at: /tmp

      - checkout:
          path: /tmp/src/mriqc

      - add_ssh_keys:
          fingerprints:
            - "80:ec:ae:e8:92:1f:88:83:2a:e0:ee:35:39:79:85:88"

      - run:
          name: Checkout origin/master
          command: |
            git config user.email "nipreps@gmail.com"
            git config user.name "NiPreps Bot"
            git fetch origin
            git checkout -f origin/master
      - run:
          name: Update CHANGES if this is a merge commit
          command: |
            if (( $( git cat-file -p HEAD | sed -n '/^parent [0-9a-f]*$/p' | wc -l ) > 1 )); then
              bash update_changes.sh
              git add CHANGES.rst
              git commit -m "auto: Update CHANGES [skip ci]"
              git push origin HEAD:master
            fi

  test_package:
    docker:
      - image: circleci/python:3.8.5
    working_directory: /tmp/src/mriqc
    steps:
      - checkout
      - run:
          name: Start virtual environment
          command: |
            sudo python -m pip install "setuptools>=30.3.0" "pip>=10.0.1" twine docutils
            python -m venv /tmp/venv
            source /tmp/venv/bin/activate
      - run:
          name: Build and check
          command: |
            python setup.py sdist
            python -m twine check dist/*
      - run:
          name: Validate version
          command: |
            if [[ "${CIRCLE_TAG}" != "" ]]; then
              echo "${CIRCLE_TAG}" > mriqc/VERSION
            fi
            THISVERSION=$( python -c "from versioneer import get_version; print(get_version())" )
            python -m pip install --user dist/*.tar.gz
            mkdir empty
            cd empty
            INSTALLED=$( python -c 'import mriqc; print(mriqc.__version__)' )
            test "${CIRCLE_TAG:-$THISVERSION}" == "$INSTALLED"

  deploy_pypi:
    docker:
      - image: circleci/python:3.8.5
    working_directory: /tmp/src/mriqc
    steps:
      - checkout
      - run:
          name: Start virtual environment
          command: |
            sudo python -m pip install "setuptools>=30.3.0" "pip>=10.0.1" twine docutils
            python -m venv /tmp/venv
            source /tmp/venv/bin/activate
      - run:
          name: Deploy to PyPi
          command: |
            echo "${CIRCLE_TAG}" > mriqc/VERSION
            # Inject MRIQC-WebAPI secret
            if [ "${MRIQC_API_SECRET_TOKEN}" != "" ]; then
              sed -i -E "s/<secret_token>/$MRIQC_API_SECRET_TOKEN/" mriqc/interfaces/webapi.py
              sed -i -E "s/<secret_token>/$MRIQC_API_SECRET_TOKEN/" mriqc/data/reports/individual.html
              grep -q -i $MRIQC_API_SECRET_TOKEN mriqc/interfaces/webapi.py
            fi
            python setup.py sdist
            python -m twine check dist/*
            python -m twine upload dist/*

  deploy_docker:
    machine:
      image: ubuntu-1604:202007-01
    working_directory: /tmp/src/mriqc
    steps:
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
            - /tmp/docker-compose
      - docker/install-docker-credential-helper
      - run:
          name: Docker authentication
          command: |
            if [[ -n $DOCKER_PAT ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set-up a Docker registry
          command: |
            if [[ -f /tmp/images/registry.tar.gz ]]; then
              echo "Loading saved registry image"
              docker load < /tmp/images/registry.tar.gz
            else
              echo "Pulling registry image from DockerHub"
              docker pull registry:2
            fi
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/mriqc
            docker tag localhost:5000/mriqc nipreps/mriqc:latest

      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            docker push nipreps/mriqc:latest
            docker tag nipreps/mriqc nipreps/mriqc:$CIRCLE_TAG
            docker push nipreps/mriqc:$CIRCLE_TAG

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_docs:
          filters:
            tags:
              only: /.*/

      - build:
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - test_package:
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - test_pytest:
          requires:
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - T1w:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - bold:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore: /docs?\/.*/
            tags:
              only: /.*/

      - update_changes:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/

      - deploy_docker:
          requires:
            - build
            - test_pytest
            - test_package
            - build_docs
            - T1w
            - bold
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deploy_docker
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
